geom = "errorbar",
width = 0.4,
size = 0.7,
aes( group = Treatment), color = "black", # Color the errorbar based on treatment
position = position_dodge(width = 0.7)
) +
stat_summary( # To add a point for the mean
fun = mean,
geom = "point",
size = 1, # Customize the size
aes( group = Treatment),color = "black", # Map group aesthetic to treatment
position = position_dodge(width = 0.7)
) +
colFill_Treatment +
colScale_Treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 3.5, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
geom_text(data = base_model,
aes(y = 100.55, label = P.Treatment.stars, fontface = "plain"),color = "black")
#CLEAN_DATA$AntTask <-  factor(CLEAN_DATA$AntTask , levels = status_order[which(status_order %in% CLEAN_DATA$AntTask)])
CLEAN_DATA$Ant_status <- as.factor(CLEAN_DATA$Ant_status)
CLEAN_DATA$Ant_status <- factor(CLEAN_DATA$Ant_status, levels = c("queen", "treated nurse", "untreated nurse", "untreated forager"))
NURSE_col <- statuses_colours["nurse"]; names(NURSE_col) <- NULL
FORAG_col <- statuses_colours["forager"]; names(FORAG_col) <- NULL
# PLOT FOR NON-TREATED ANTS
# ## plot by Ant_status
p2 <- ggplot(
data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
aes(x = Ant_status, y = rel_conc_imputed, color=Ant_status)
) +
geom_point(position=position_jitter(width=0.2),size = 1, alpha = 0.3, show.legend = FALSE) +
scale_color_manual(values = c("untreated nurse" =NURSE_col , "untreated forager" =FORAG_col )) +
#geom_violin(trim = TRUE,width =1.1, alpha = 0.6) +
stat_summary(
fun.data =  mean_se, # The function used to calculate the st.errors
geom = "errorbar",
width = 0.4,
size = 0.7,
color = "black"
) +
stat_summary( # To add a point for the mean
fun = mean,
geom = "point",
size = 0.7, # Customize the size
color = "black") +
#colFill_Treatment +
#colScale_Treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 3.5, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
scale_x_discrete(labels = c("untreated\nnurse","untreated\nforager")) +
facet_grid(. ~ gene)+
geom_text(data = base_model, aes(x = 1.5, y = 100.35, label = P.Status.stars, fontface = "plain") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# arrange plots side by side
#immune_genes_plots <- grid.arrange(queen_plot ,p1, p2, ncol = 1)
immune_genes_plots <- cowplot::plot_grid(queen_plot ,p1, p2, labels=c("A", "B","C"), ncol =  1)
SavePrint_plot(plot_obj = immune_genes_plots,
plot_name= "immune_genes_plots",
plot_size = c(7, 9),
font_size = 35,
dataset_name=deparse(substitute(genes_data)),
save_dir = save_dir_plots)
#
}
}
SavePrint_plot(plot_obj = immune_genes_plots,
plot_name= "immune_genes_plots",
plot_size = c(7, 9),
font_size = 40,
dataset_name=deparse(substitute(genes_data)),
save_dir = save_dir_plots)
SavePrint_plot(plot_obj = immune_genes_plots,
plot_name= "immune_genes_plots",
plot_size = c(7, 9),
font_size = 50,
dataset_name=deparse(substitute(genes_data)),
save_dir = save_dir_plots)
SavePrint_plot(plot_obj = immune_genes_plots,
plot_name= "immune_genes_plots",
plot_size = c(6, 8),
dataset_name=deparse(substitute(genes_data)),
save_dir = save_dir_plots)
### PLOTTING ###
for (GROUP in unique(CLEAN_DATA$GROUP)) {
if (GROUP == "TREATED_W") {
## DO NOT ANALYSE DO NOT PLOT, NOT BASAL EXPRESSION ANYMORE
# print(
#   # ggplot(
#   #   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   #   aes(x = gene, y = rel_conc_imputed, color = Treatment)
#   # ) +
#   #   geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#   #   geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#   #   colScale_Treatment +
#   #   STYLE +
#   #   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   #   scale_y_continuous(labels = scales::percent, trans = "log10") +
#   # #geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#   #   geom_text(data = mod_T[which(mod_T$GROUP==GROUP),], aes(x = gene, y = 1.5, label = p, fontface = "bold") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#
#   ggplot(data =  CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#          aes(x = gene, y = rel_conc_imputed, color = Treatment)
#   ) +
#     geom_violin(aes(fill= Treatment), trim = FALSE,width =1.1, alpha = 0.6) +
#     geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#     colFill_Treatment +
#     colScale_Treatment +
#     STYLE +
#     ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#     scale_y_continuous(labels = scales::percent, trans = "log10") +
#     geom_text(data = mod_T[which(mod_T$GROUP==GROUP),], aes(x = gene, y = 100, label = p, fontface = "bold") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# )
}else if (GROUP == "QUEEN"){
if (QUEEN_data_OK) {
# separated from the above as the label is assigned differently!
queen_plot <-(
# ggplot(
#   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   aes(x = gene, y = rel_conc_imputed, color = Treatment)
# ) +
#   geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#   geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") +
# #geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#   geom_text(data = mod_Q[which(mod_Q$GROUP==GROUP),], aes(x = gene, y = 1, label = p, fontface = "bold") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
ggplot(data =  CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
aes(x = gene, y = rel_conc_imputed, color = Treatment)
) +
geom_boxplot(size = 0.7,aes(fill = Treatment),colour ="black", alpha = 0,lwd=0.5) + #aes(fill = Treatment),colour ="black", alpha = 0
geom_point(position=position_jitterdodge(),aes(fill = Treatment), size = 1) + #,aes(fill = Treatment,color="black"), shape=21,size = 1, show.legend = FALSE
colFill_treatment +
colScale_treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 3.5, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
#ylab(expression("log"["2"] ~ "fold-change\nin gene expression")) +
theme(legend.position = "bottom", legend.direction = "horizontal") +
geom_text(data = mod_Q[which(mod_Q$GROUP==GROUP),], aes(x = gene, y = 0.2, label = P.stars) , color = "black") # , fontface = "bold", position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
)
}
}else if (GROUP == "UNTREATED_W"){
# print(
# ggplot(data =  CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#        aes(x = Ant_status, y = rel_conc_imputed, color = Treatment)) +
#   geom_violin(aes(fill= Treatment), trim = FALSE,width =1.1, alpha = 0.6) +
#   geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#   colFill_Treatment +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") +
#   facet_grid(. ~ gene)
#   #   geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# )
# PLOT FOR NON-TREATED ANTS
## plot by Treatment (size)
p1 <- NULL
p2 <- NULL
# p1 <- ggplot(
#   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   aes(x = gene, y = rel_conc_imputed, color = Treatment)
# ) +
#   geom_violin(aes(fill= Treatment), trim = TRUE,width =1.1, alpha = 0.6) +
#   geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#   #geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#   #geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#   colFill_Treatment +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") #+
# #geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#
# PLOT FOR NON-TREATED ANTS
# ## plot by Treatment (size)
# p2 <- ggplot(
#   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   aes(x = Ant_status, y = rel_conc_imputed, color = treatment)
# ) +
#   #geom_point(aes(colour = Colony),position=position_jitterdodge(), size = 1, alpha = 0.3) +
#   geom_violin(trim = TRUE,width =1.1, alpha = 0.6) +
#   geom_boxplot(colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#   colFill_Treatment +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") +
#   facet_grid(. ~ gene) #+
# #geom_text(data = label_status[which(label_status$GROUP==GROUP),], aes(x = Ant_status, y = 10, group = Ant_status, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# PLOT FOR NON-TREATED ANTS
# ## plot by Treatment (size)
#base model params
base_model <- PipelineTesting[which(PipelineTesting$T.E.==3 & PipelineTesting$LOD==37 & PipelineTesting$imputation=="HM"& PipelineTesting$Invalids=="Invalids_DISCARD" &PipelineTesting$ALWAYS_DISCARD==T),]
base_model$P.Status.stars <- sapply(base_model$P.Status, from_p_to_ptext)
base_model$P.Treatment.stars <- sapply(base_model$P.Treatment, from_p_to_ptext)
p1 <- ggplot(
data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
aes(x = gene, y = rel_conc_imputed, color = Treatment)
) +
#geom_violin(aes(fill= Treatment), trim = TRUE,width =1.1, alpha = 0.6) +
#geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#geom_violin(trim = TRUE,width =1.1, alpha = 0.6) +
stat_summary(
fun.data = mean_se, # The function used to calculate the st.errors
geom = "errorbar",
width = 0.4,
size = 0.7,
aes( group = Treatment), color = "black", # Color the errorbar based on treatment
position = position_dodge(width = 0.7)
) +
stat_summary( # To add a point for the mean
fun = mean,
geom = "point",
size = 1, # Customize the size
aes( group = Treatment),color = "black", # Map group aesthetic to treatment
position = position_dodge(width = 0.7)
) +
colFill_Treatment +
colScale_Treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 5, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
geom_text(data = base_model,
aes(y = 100.55, label = P.Treatment.stars, fontface = "plain"),color = "black")
#CLEAN_DATA$AntTask <-  factor(CLEAN_DATA$AntTask , levels = status_order[which(status_order %in% CLEAN_DATA$AntTask)])
CLEAN_DATA$Ant_status <- as.factor(CLEAN_DATA$Ant_status)
CLEAN_DATA$Ant_status <- factor(CLEAN_DATA$Ant_status, levels = c("queen", "treated nurse", "untreated nurse", "untreated forager"))
NURSE_col <- statuses_colours["nurse"]; names(NURSE_col) <- NULL
FORAG_col <- statuses_colours["forager"]; names(FORAG_col) <- NULL
# PLOT FOR NON-TREATED ANTS
# ## plot by Ant_status
p2 <- ggplot(
data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
aes(x = Ant_status, y = rel_conc_imputed, color=Ant_status)
) +
geom_point(position=position_jitter(width=0.2),size = 1, alpha = 0.3, show.legend = FALSE) +
scale_color_manual(values = c("untreated nurse" =NURSE_col , "untreated forager" =FORAG_col )) +
#geom_violin(trim = TRUE,width =1.1, alpha = 0.6) +
stat_summary(
fun.data =  mean_se, # The function used to calculate the st.errors
geom = "errorbar",
width = 0.4,
size = 0.7,
color = "black"
) +
stat_summary( # To add a point for the mean
fun = mean,
geom = "point",
size = 0.7, # Customize the size
color = "black") +
#colFill_Treatment +
#colScale_Treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 3.5, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
scale_x_discrete(labels = c("untreated\nnurse","untreated\nforager")) +
facet_grid(. ~ gene)+
geom_text(data = base_model, aes(x = 1.5, y = 100.35, label = P.Status.stars, fontface = "plain") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# arrange plots side by side
#immune_genes_plots <- grid.arrange(queen_plot ,p1, p2, ncol = 1)
immune_genes_plots <- cowplot::plot_grid(queen_plot ,p1, p2, labels=c("A", "B","C"), ncol =  1)
SavePrint_plot(plot_obj = immune_genes_plots,
plot_name= "immune_genes_plots",
plot_size = c(6, 8),
dataset_name=deparse(substitute(genes_data)),
save_dir = save_dir_plots)
#
}
}
### PLOTTING ###
for (GROUP in unique(CLEAN_DATA$GROUP)) {
if (GROUP == "TREATED_W") {
## DO NOT ANALYSE DO NOT PLOT, NOT BASAL EXPRESSION ANYMORE
# print(
#   # ggplot(
#   #   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   #   aes(x = gene, y = rel_conc_imputed, color = Treatment)
#   # ) +
#   #   geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#   #   geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#   #   colScale_Treatment +
#   #   STYLE +
#   #   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   #   scale_y_continuous(labels = scales::percent, trans = "log10") +
#   # #geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#   #   geom_text(data = mod_T[which(mod_T$GROUP==GROUP),], aes(x = gene, y = 1.5, label = p, fontface = "bold") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#
#   ggplot(data =  CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#          aes(x = gene, y = rel_conc_imputed, color = Treatment)
#   ) +
#     geom_violin(aes(fill= Treatment), trim = FALSE,width =1.1, alpha = 0.6) +
#     geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#     colFill_Treatment +
#     colScale_Treatment +
#     STYLE +
#     ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#     scale_y_continuous(labels = scales::percent, trans = "log10") +
#     geom_text(data = mod_T[which(mod_T$GROUP==GROUP),], aes(x = gene, y = 100, label = p, fontface = "bold") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# )
}else if (GROUP == "QUEEN"){
if (QUEEN_data_OK) {
# separated from the above as the label is assigned differently!
queen_plot <-(
# ggplot(
#   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   aes(x = gene, y = rel_conc_imputed, color = Treatment)
# ) +
#   geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#   geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") +
# #geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#   geom_text(data = mod_Q[which(mod_Q$GROUP==GROUP),], aes(x = gene, y = 1, label = p, fontface = "bold") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
ggplot(data =  CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
aes(x = gene, y = rel_conc_imputed, color = Treatment)
) +
geom_boxplot(size = 0.7,aes(fill = Treatment),colour ="black", alpha = 0,lwd=0.5) + #aes(fill = Treatment),colour ="black", alpha = 0
geom_point(position=position_jitterdodge(),aes(fill = Treatment), size = 1) + #,aes(fill = Treatment,color="black"), shape=21,size = 1, show.legend = FALSE
colFill_treatment +
colScale_treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 3.5, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
#ylab(expression("log"["2"] ~ "fold-change\nin gene expression")) +
theme(legend.position = "bottom", legend.direction = "horizontal") +
geom_text(data = mod_Q[which(mod_Q$GROUP==GROUP),], aes(x = gene, y = 0.2, label = P.stars) , color = "black") # , fontface = "bold", position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
)
}
}else if (GROUP == "UNTREATED_W"){
# print(
# ggplot(data =  CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#        aes(x = Ant_status, y = rel_conc_imputed, color = Treatment)) +
#   geom_violin(aes(fill= Treatment), trim = FALSE,width =1.1, alpha = 0.6) +
#   geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#   colFill_Treatment +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") +
#   facet_grid(. ~ gene)
#   #   geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# )
# PLOT FOR NON-TREATED ANTS
## plot by Treatment (size)
p1 <- NULL
p2 <- NULL
# p1 <- ggplot(
#   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   aes(x = gene, y = rel_conc_imputed, color = Treatment)
# ) +
#   geom_violin(aes(fill= Treatment), trim = TRUE,width =1.1, alpha = 0.6) +
#   geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#   #geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#   #geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#   colFill_Treatment +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") #+
# #geom_text(data = label_treatment[which(label_treatment$GROUP==GROUP),], aes(x = gene, y = 10, group = Treatment, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
#
# PLOT FOR NON-TREATED ANTS
# ## plot by Treatment (size)
# p2 <- ggplot(
#   data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
#   aes(x = Ant_status, y = rel_conc_imputed, color = treatment)
# ) +
#   #geom_point(aes(colour = Colony),position=position_jitterdodge(), size = 1, alpha = 0.3) +
#   geom_violin(trim = TRUE,width =1.1, alpha = 0.6) +
#   geom_boxplot(colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
#   colFill_Treatment +
#   colScale_Treatment +
#   STYLE +
#   ggtitle(paste(unique(CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),"Ant_status"]), collapse = ", ")) +
#   scale_y_continuous(labels = scales::percent, trans = "log10") +
#   facet_grid(. ~ gene) #+
# #geom_text(data = label_status[which(label_status$GROUP==GROUP),], aes(x = Ant_status, y = 10, group = Ant_status, label = V1, fontface = "bold"), position = position_jitterdodge(seed = 2)) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# PLOT FOR NON-TREATED ANTS
# ## plot by Treatment (size)
#base model params
base_model <- PipelineTesting[which(PipelineTesting$T.E.==3 & PipelineTesting$LOD==37 & PipelineTesting$imputation=="HM"& PipelineTesting$Invalids=="Invalids_DISCARD" &PipelineTesting$ALWAYS_DISCARD==T),]
base_model$P.Status.stars <- sapply(base_model$P.Status, from_p_to_ptext)
base_model$P.Treatment.stars <- sapply(base_model$P.Treatment, from_p_to_ptext)
p1 <- ggplot(
data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
aes(x = gene, y = rel_conc_imputed, color = Treatment)
) +
#geom_violin(aes(fill= Treatment), trim = TRUE,width =1.1, alpha = 0.6) +
#geom_boxplot(aes(fill= Treatment),colour ="black", width = 0.1, alpha = 0.6, position = position_dodge(width = 1.1) )+
geom_point(position=position_jitterdodge(), size = 1, alpha = 0.3, show.legend = FALSE) +
#geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.2) +
#geom_violin(trim = TRUE,width =1.1, alpha = 0.6) +
stat_summary(
fun.data = mean_se, # The function used to calculate the st.errors
geom = "errorbar",
width = 0.4,
size = 0.7,
aes( group = Treatment), color = "black", # Color the errorbar based on treatment
position = position_dodge(width = 0.7)
) +
stat_summary( # To add a point for the mean
fun = mean,
geom = "point",
size = 1, # Customize the size
aes( group = Treatment),color = "black", # Map group aesthetic to treatment
position = position_dodge(width = 0.7)
) +
colFill_Treatment +
colScale_Treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 15, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
geom_text(data = base_model,
aes(y = 100.55, label = P.Treatment.stars, fontface = "plain"),color = "black")
#CLEAN_DATA$AntTask <-  factor(CLEAN_DATA$AntTask , levels = status_order[which(status_order %in% CLEAN_DATA$AntTask)])
CLEAN_DATA$Ant_status <- as.factor(CLEAN_DATA$Ant_status)
CLEAN_DATA$Ant_status <- factor(CLEAN_DATA$Ant_status, levels = c("queen", "treated nurse", "untreated nurse", "untreated forager"))
NURSE_col <- statuses_colours["nurse"]; names(NURSE_col) <- NULL
FORAG_col <- statuses_colours["forager"]; names(FORAG_col) <- NULL
# PLOT FOR NON-TREATED ANTS
# ## plot by Ant_status
p2 <- ggplot(
data = CLEAN_DATA[which(CLEAN_DATA$GROUP==GROUP),],
aes(x = Ant_status, y = rel_conc_imputed, color=Ant_status)
) +
geom_point(position=position_jitter(width=0.2),size = 1, alpha = 0.3, show.legend = FALSE) +
scale_color_manual(values = c("untreated nurse" =NURSE_col , "untreated forager" =FORAG_col )) +
#geom_violin(trim = TRUE,width =1.1, alpha = 0.6) +
stat_summary(
fun.data =  mean_se, # The function used to calculate the st.errors
geom = "errorbar",
width = 0.4,
size = 0.7,
color = "black"
) +
stat_summary( # To add a point for the mean
fun = mean,
geom = "point",
size = 0.7, # Customize the size
color = "black") +
#colFill_Treatment +
#colScale_Treatment +
STYLE +
scale_y_continuous(labels = function(x) format(x, digits=1, nsmall=1,scientific = FALSE), trans = "log2") +
theme(plot.margin = margin(2, 2, 3.5, 15) ) +
ylab(expression(paste("log₂ fold-change\nin gene expression"))) +
scale_x_discrete(labels = c("untreated\nnurse","untreated\nforager")) +
facet_grid(. ~ gene)+
geom_text(data = base_model, aes(x = 1.5, y = 100.35, label = P.Status.stars, fontface = "plain") , color = "black") #, position = position_jitterdodge(seed = 2) # jitterdodge in geom_text will need the grouping aesthetic (eg, colour) to be defined inside ggplot() +
# arrange plots side by side
#immune_genes_plots <- grid.arrange(queen_plot ,p1, p2, ncol = 1)
immune_genes_plots <- cowplot::plot_grid(queen_plot ,p1, p2, labels=c("A", "B","C"), ncol =  1)
SavePrint_plot(plot_obj = immune_genes_plots,
plot_name= "immune_genes_plots",
plot_size = c(6, 8),
dataset_name=deparse(substitute(genes_data)),
save_dir = save_dir_plots)
#
}
}
##### READ STARTING FILE
# read the csv file
genes_data <- read.csv(paste(WORKDIR, "Adriano_RTqPCR_immune_genes_MASTER_REPORT.csv", sep = "/"))
unique(genes_data$Colony)
table(genes_data$Colony)
## explore all data distribution
ggplot(CLEAN_DATA , aes(x = gene, fill = Final_Cat)) +
geom_bar(position = "stack") +
geom_text(position = position_stack(vjust = 0.5), aes(label =after_stat(count)), stat='count',size=3) +
facet_wrap(~Ant_status+Treatment, nrow=4)+
#scale_fill_brewer(palette = "Set2") +
labs(title = "Frequency of Category by Ant_status by gene", x = "Gene", y = "Frequency") +
coord_flip() +
theme(legend.position = "bottom",
legend.box = "horizontal",
legend.direction = "horizontal",
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12, face = "bold"))+
scale_y_continuous(limits = c(0, 430), expand = c(0, 0))
print(
ggplot(CLEAN_DATA, aes(x = Ant_status, y = !!sym(REL_CONC),colour=Treatment)) +
geom_boxplot(aes(colour = Treatment), lwd = 0.8, alpha = 0.3) +
colScale_Treatment +
STYLE +
scale_y_continuous(labels = scales::percent,trans='log10') + #, limits = c(1e-08,1000)
ggtitle(REL_CONC, subtitle =paste("Data=",NAME_DF,sep=" ")) +
facet_grid(. ~ gene)
# plot the relative concentration.
print(
ggplot(data = CLEAN_DATA, aes(x = Ant_status, y = rel_conc_imputed, fill = Treatment)) +
geom_violin(aes(fill= Treatment), trim = FALSE,width =1.2) +
geom_boxplot(aes(fill= Treatment), width = 0.1, alpha = 0.5, position = position_dodge(width = 1.2) )+
colFill_Treatment +
STYLE +
scale_y_continuous(labels = scales::percent, trans = "log10") +
facet_grid(. ~ gene)
